#!/usr/bin/env bash
set -x

## Settings for test networks like Rinkeby, Kovan, Ropsten

## Internal settings (do not touch these unless you know what you are doing!!)
export ETH_RPC_PORT=${ETH_RPC_PORT:-"8545"}
export ETH_RPC_URL=https://rinkeby.infura.io/v3/47706a887c1245319e35b5e507c7f097
export ETH_KEYSTORE="$(pwd)"
export ETH_GAS=8000000
export ETH_GAS_PRICE=20000000000
export ETH_FROM=0x9556E25F9b4D343ee38348b6Db8691d10fD08A61
export ETH_PASSWORD=~/.eth-pwd
################################################################################
# max is 24576
# DATA=$(seth --to-hexdata out/SimpleAssetManagement.bin)
# echo $((${#DATA} / 2 - 1))

# echo -e "===================== ######################## =========================="
# echo -e "=====================  Setup Asset Management  =========================="
# echo -e "===================== ######################## =========================="
export custodian=0x9556E25F9b4D343ee38348b6Db8691d10fD08A61
export eth=0x00000000000000000000000000000000000000ee

# Deployed contrcts
export dpt=0xb30041ff94fc8fc071029f0abc925a60b5a2059a
export cdc=0x3b5822b3cb38b82ffe49bcb3c6c6483b68b61971
export dpass=0x18a7a95d17f2e7208982922a814d49661f23a073
export ethPriceFeed=0x2Ed2b811A048683E7f2CE00587f73CcfdB86D219
export dptPriceFeed=0xc9faD47Fe77500515de29024C076b6d8D87d423E
export cdcPriceFeed=0x1D2A08e056059a066D98B516BDEab01DFbD0D45F
export wal=0x16bb6010f38effab6238988d72119f3738ebeb6e
export burner=0x728fe77af990628164fd4f39a9aba163a998d540
export dcdc=0xae1764f007284bd2ad4add9376bae9cc6bb57dd1
export liq=0xc633247c3647a33a0adae21335516a1497393834
export guard=0x9251886d8642df76e1b6bbfb0c28b335d1c61c31
export dex=0xc708c97cb586f4e790a06e8dfceba757702b976c
export asm=0x1e0e3f73ec0584993ac7958c2d8256487db6e67d

# DPT
# echo -e "====================== Setup decimals =========================="
export decimals=$(seth --to-bytes32 $(seth --from-ascii decimals))
export d18=$(seth --to-bytes32 $(seth --to-uint256 18))
export bDpt=$(seth --to-bytes32 $(seth --to-uint256 $dpt))
export diamonds=$(seth --to-bytes32 $(seth --from-ascii diamonds))

seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $decimals $bDpt $d18 $diamonds

# CDC
export bCdc=$(seth --to-bytes32 $(seth --to-uint256 $cdc))
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $decimals $bCdc $d18 $diamonds

# ETH
export bEth=$(seth --to-bytes32 $(seth --to-uint256 $eth))
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $decimals $bEth $d18 $diamonds

# DCDC
export bDcdc=$(seth --to-bytes32 $(seth --to-uint256 $dcdc))
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $decimals $bDcdc $d18 $diamonds

# == Price Feed ==
export priceFeed=$(seth --to-bytes32 $(seth --from-ascii priceFeed))
export bDptPriceFeed=$(seth --to-bytes32 $(seth --to-uint256 $dptPriceFeed))

echo -e "====================== Setup priceFeed =========================="
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $priceFeed $bDpt $bDptPriceFeed $diamonds

export bCdcPriceFeed=$(seth --to-bytes32 $(seth --to-uint256 $cdcPriceFeed))
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $priceFeed $bCdc $bCdcPriceFeed $diamonds

# DCDC is the same as CDC price feed
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $priceFeed $bDcdc $bCdcPriceFeed $diamonds

export bEthPriceFeed=$(seth --to-bytes32 $(seth --to-uint256 $ethPriceFeed))
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $priceFeed $bEth $bEthPriceFeed $diamonds

export bEthPriceFeed=$(seth --to-bytes32 $(seth --to-uint256 $ethPriceFeed))
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $priceFeed $bEth $bEthPriceFeed $diamonds


# == Custodians ==
echo -e "====================== Setup Custodians =========================="
export custodians=$(seth --to-bytes32 $(seth --from-ascii custodians))
export bCustodian=$(seth --to-bytes32 $(seth --to-uint256 $custodian))
export bTrue=$(seth --to-bytes32 $(seth --to-uint256 1))
export bFalse=$(seth --to-bytes32 $(seth --to-uint256 0))

seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $custodians $bCustodian $bTrue $diamonds

# == payTokens ==
echo -e "====================== Setup payTokens =========================="
export payTokens=$(seth --to-bytes32 $(seth --from-ascii payTokens))

seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $payTokens $bDpt $bTrue $diamonds
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $payTokens $bEth $bTrue $diamonds


# == cdcs ==
echo -e "====================== Setup cdcs =========================="
export cdcs=$(seth --to-bytes32 $(seth --from-ascii cdcs))
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $cdcs $bCdc $bTrue $diamonds

# == dcdcs ==
echo -e "====================== Setup dcdcs =========================="
export dcdcs=$(seth --to-bytes32 $(seth --from-ascii dcdcs))
seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $dcdcs $bDcdc $bTrue $diamonds

# == dpasses ==
echo -e "====================== Setup dpasses =========================="
export dpasses=$(seth --to-bytes32 $(seth --from-ascii dpasses))
export bDpass=$(seth --to-bytes32 $(seth --to-uint256 $dpass))

seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $dpasses $bDpass $bTrue $diamonds


echo -e "====================== Setup overCollRatio =========================="

export overCollRatio=$(seth --to-bytes32 $(seth --from-ascii overCollRatio))
export b11eth=$(seth --to-bytes32 $(seth --to-uint256 $(seth --to-wei 1.1 eth)))
export bEmpty=$(seth --to-bytes32 $(seth --from-ascii ""))

seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $overCollRatio $b11eth $bEmpty $diamonds

echo -e "====================== ################### =========================="
echo -e "======================    Setup Exchange   =========================="
echo -e "====================== ################### =========================="

# We named everything from the point of view of the user. CanSellErc20 means USER Can Sell Erc20 token.
export canSellErc20=$(seth --to-bytes32 $(seth --from-ascii canSellErc20))
export canBuyErc20=$(seth --to-bytes32 $(seth --from-ascii canBuyErc20))
# User can sell to dex DPT and CDC?
# seth send $dex "setConfig(bytes32,bytes32,bytes32)" $canSellErc20 $bDpt $bTrue
# seth send $dex "setConfig(bytes32,bytes32,bytes32)" $canSellErc20 $bCdc $bTrue
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $canSellErc20 $bEth $bTrue
# User can buy DPT?
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $canBuyErc20 $bDpt $bTrue
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $canBuyErc20 $bCdc $bTrue


export canBuyErc721=$(seth --to-bytes32 $(seth --from-ascii canBuyErc721))
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $canBuyErc721 $bDpass $bTrue

seth send $dex "setConfig(bytes32,bytes32,bytes32)" $decimals $bDpt $d18
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $decimals $bCdc $d18
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $decimals $bEth $d18

seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii cdc)) $bCdc $bEmpty
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii dpt)) $bDpt $bEmpty

export handledByAsm=$(seth --to-bytes32 $(seth --from-ascii handledByAsm))
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $handledByAsm $bCdc $d18
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $handledByAsm $bDpass $d18

seth send $dex "setConfig(bytes32,bytes32,bytes32)" $priceFeed $bDpt $bDptPriceFeed
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $priceFeed $bEth $bEthPriceFeed
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $priceFeed $bCdc $bCdcPriceFeed

export bLiq=$(seth --to-bytes32 $(seth --to-uint256 $liq))
export bBurner=$(seth --to-bytes32 $(seth --to-uint256 $burner))
export bWal=$(seth --to-bytes32 $(seth --to-uint256 $wal))
export bAsm=$(seth --to-bytes32 $(seth --to-uint256 $asm))
export bDex=$(seth --to-bytes32 $(seth --to-uint256 $dex))

# uint public fixFee = 0 ether;           // in USD
# uint public varFee = .001 ether;        // variable fee is 0.1% of value
# uint public profitRate = .3 ether;      // profit rate 30%
# bool public takeProfitOnlyInDpt = true; // take only profit or total fee (cost + profit) in DPT

seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii liq)) $bLiq $bEmpty
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii burner)) $bBurner $bEmpty
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii asm)) $bAsm $bEmpty
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii wal)) $bWal $bEmpty

export bFixFee=$(seth --to-bytes32 $(seth --to-uint256 $(seth --to-wei 1 eth)))
export bVarFee=$(seth --to-bytes32 $(seth --to-uint256 $(seth --to-wei 0.01 eth)))

seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii fixFee)) $bFixFee $bEmpty
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii varFee)) $bVarFee $bEmpty
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii profitRate)) $bTrue $bEmpty

seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii custodian20)) $bEth $bAsm
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii custodian20)) $bDpt $bAsm
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii custodian20)) $bCdc $bAsm

seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii takeProfitOnlyInDpt)) $bFalse $bEmpty

export ANY=$(seth call $guard "ANY()")
export bANY=$(seth --to-bytes32 $ANY)
export uANY=$(seth --to-uint256 $ANY)

# Guard
echo -e "============== Setup guard ====================="
seth send $asm "setAuthority(address)" $guard
seth send $cdc "setAuthority(address)" $guard
seth send $dcdc "setAuthority(address)" $guard
seth send $dpass "setAuthority(address)" $guard

# TODO: fix permissions
# caller, toContract, permissions
seth send $guard "permit(address,address,bytes32)" $asm $cdc $bANY
seth send $guard "permit(address,address,bytes32)" $asm $dcdc $bANY
seth send $guard "permit(address,address,bytes32)" $asm $dpass $bANY

seth send $guard "permit(address,address,bytes32)" $custodian $asm $bANY
seth send $guard "permit(address,address,bytes32)" $custodian $dpass $bANY
seth send $guard "permit(address,address,bytes32)" $dex $asm $bANY

seth send $liq "approve(address,address,uint)" $dpt $dex $uANY
seth send $dex "setConfig(bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii liq)) $bLiq $bEmpty
seth send $liq "setOwner(address)" $dex

seth send $asm "setConfig(bytes32,bytes32,bytes32,bytes32)" $(seth --to-bytes32 $(seth --from-ascii setApproveForAll)) $bDpass $bDex $bTrue

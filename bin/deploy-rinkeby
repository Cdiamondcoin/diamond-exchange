#!/usr/bin/env bash
### deploy -- command-line interface to deploy Dpass contract
### Usage: deploy

### Before using deploy, you should copy the keystore file from your keystore to current directory. See:
### geth - https://github.com/ethereum/go-ethereum/wiki/Backup-&-restore
### parity - https://ethereum.stackexchange.com/questions/6471/where-are-my-keys-and-chain-data-located-if-i-am-using-parity

set -x

## Settings for test networks like Rinkeby, Kovan, Ropsten

## Internal settings (do not touch these unless you know what you are doing!!)
export ETH_RPC_PORT=${ETH_RPC_PORT:-"8545"}
export ETH_RPC_URL=https://rinkeby.infura.io/v3/47706a887c1245319e35b5e507c7f097
export ETH_KEYSTORE="$(pwd)"

# export SOLC_FLAGS=${SOLC_FLAGS:-"--optimize --optimize-runs 1"}
export SOLC_FLAGS="--optimize --optimize-runs 1"
# export ETH_GAS=${ETH_GAS:-"8000000"}
# https://ethstats.net/ 9965875
# https://www.rinkeby.io/#stats 7006834
export ETH_GAS=9965875

# 1000000000 wei = 1 gwei
# export ETH_GAS_PRICE=${ETH_GAS_PRICE:-"10000000000"}
export ETH_GAS_PRICE=20000000000

# export ETH_FROM=$(seth rpc eth_coinbase)
export ETH_FROM=0x9556E25F9b4D343ee38348b6Db8691d10fD08A61
export ETH_PASSWORD=~/.eth-pwd

dapp build --extract

hevm flatten --source-file lib/ds-token/src/token.sol --json-file out/dapp.sol.json > out/DSToken-flatt.sol
hevm flatten --source-file src/DiamondExchange.t.sol --json-file out/dapp.sol.json > out/TestFeedLike-flatt.sol
hevm flatten --source-file src/Liquidity.sol --json-file out/dapp.sol.json > out/Liquidity-flatt.sol
hevm flatten --source-file src/Wallet.sol --json-file out/dapp.sol.json > out/Wallet-flatt.sol
hevm flatten --source-file src/Burner.sol --json-file out/dapp.sol.json > out/Burner-flatt.sol
hevm flatten --source-file src/Dcdc.sol --json-file out/dapp.sol.json > out/Dcdc-flatt.sol
hevm flatten --source-file src/CdcAuthority.sol --json-file out/dapp.sol.json > out/CdcAuthority-flatt.sol
hevm flatten --source-file src/DiamondExchange.sol --json-file out/dapp.sol.json > out/DiamondExchange-flatt.sol
hevm flatten --source-file src/SimpleAssetManagement.sol --json-file out/dapp.sol.json > out/SimpleAssetManagement-flatt.sol

################################################################################
# max is 24576
# DATA=$(seth --to-hexdata out/SimpleAssetManagement.bin)
# echo $((${#DATA} / 2 - 1))
################################################################################

# DPT
# 10 mln
export SUPPLY=10000000000000000000000000000
dpt=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii DPT)))
echo -e "DPT DEPLOYED AT: $dpt"
seth send $dpt "mint(uint)" $(seth --to-uint256 $SUPPLY)

# CDC
cdc=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii CDC)))
echo -e "CDC DEPLOYED AT: $CDC"

# ETH feed
export RATE=140
export FEED_VALID=true
ethPriceFeed=$(dapp create TestFeedLike $(seth --to-uint256 $(seth --to-wei $RATE eth)) $FEED_VALID)
echo -e "ETH Price Fedd DEPLOYED AT: $ethPriceFeed"

# DPT feed
export RATE=12
dptPriceFeed=$(dapp create TestFeedLike $(seth --to-uint256 $(seth --to-wei $RATE eth)) $FEED_VALID)
echo -e "DPT Price Fedd DEPLOYED AT: $dptPriceFeed"

# CDC feed
export RATE=70
cdcPriceFeed=$(dapp create TestFeedLike $(seth --to-uint256 $(seth --to-wei $RATE eth)) $FEED_VALID)
echo -e "CDC Price Fedd DEPLOYED AT: $cdcPriceFeed"

export liq=$(dapp create Liquidity)
echo -e "Liquiditiy DEPLOYED AT: $liq"
seth send $dpt "transfer(address,uint)" $liq $(seth --to-uint256 $(seth --to-wei 10000 eth))

export wal=$(dapp create Wallet)
echo -e "Wallet DEPLOYED AT: $wal"

burner=$(dapp create Burner "$dpt")
echo -e "Burner DEPLOYED AT: $burner"

export cccc=$(seth --to-bytes32 $(seth --from-ascii "BR,VS,G,0.05"))
export bDcdcName=$(seth --to-bytes32 $(seth --from-ascii DCDC))
dcdc=$(dapp create Dcdc $cccc $bDcdcName 1)
echo -e "DCDC DEPLOYED AT: $dcdc"

export guard=$(dapp create CdcAuthority)
echo -e "Guard DEPLOYED AT: $guard"

export red=$(dapp create Redeemer)
echo -e "Redeemer DEPLOYED AT: $red"

export dex=$(dapp create DiamondExchange)
echo -e "DiamondExchange DEPLOYED AT: $dex"

export asm=$(dapp create SimpleAssetManagement)
echo -e "ASM DEPLOYED AT: $asm"

set +x

echo -e "export dpt=$dpt"
echo -e "export cdc=$cdc"
echo -e "export ethPriceFeed=$ethPriceFeed"
echo -e "export dptPriceFeed=$dptPriceFeed"
echo -e "export cdcPriceFeed=$cdcPriceFeed"
echo -e "export liq=$liq"
echo -e "export wal=$wal"
echo -e "export burner=$burner"
echo -e "export dcdc=$dcdc"
echo -e "export guard=$guard"
echo -e "export dex=$dex"
echo -e "export asm=$asm"


# ===================== END =========================
# # enable CdcExchange to manage Cdc tokens
# seth send $CDC "approve(address,uint)" $CdcExchange ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

# # enable CdcExchange to manage DPT tokens (for fee)
# seth send $DPT "approve(address,uint)" $CdcExchange ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

# # seth send 0x9537040cd32ed8abd5f04fbb7b83f619626a5079 "mintDiamondTo(address, string memory, uint, string memory)" 0x9556E25F9b4D343ee38348b6Db8691d10fD08A61 "7296159263" 00000000000000000000000000000000000000000000000009da6d3cfe870000 ""

# # Get data from price feed
# # seth call 0x97e4b0634971c2b286eab779bb672cf69fe525d2 "peek()(bytes32, bool)"
# # seth --to-fix 18 $(seth --to-dec RESPONSE)